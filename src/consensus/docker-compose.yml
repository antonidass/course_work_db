# Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)

version: '3.7'

# Define services
services:
  # App backend service
  app-server:
    # Configuration for building the docker image for the backend service
#    image: 'docker-spring-boot-postgres:latest'
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    depends_on:
      - db # This service depends on mysql. Start that first.
    environment: # Pass environment variables to the service
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/consensus
      - SPRING_DATASOURCE_USERNAME=compose-postgres
      - SPRING_DATASOURCE_PASSWORD=compose-postgres
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend
#      - frontend

  # Frontend Service
#  app-client:
#    build:
#      context: polling-app-client # Use an image built from the specified dockerfile in the `polling-app-client` directory.
#      dockerfile: Dockerfile
#      args:
#        REACT_APP_API_BASE_URL: http://127.0.0.1:8080/api
#    ports:
#      - "9090:80" # Forward the exposed port 80 on the container to port 80 on the host machine
#    restart: always
#    depends_on:
#      - app-server
#    networks:
#      - frontend

  # Database Service (Mysql)
  db:
    image: 'postgres:13.1-alpine'
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=consensus
      - POSTGRES_USER=compose-postgres
      - POSTGRES_PASSWORD=compose-postgres
#    volumes:
#      - db-data:/var/lib/postgres
    networks:
      - backend


# Volumes
#volumes:
#  db-data:

# Networks to be created to facilitate communication between containers
networks:
  backend:
#  frontend: